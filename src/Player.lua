---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by bloon.
--- DateTime: 7/2/2020 12:08 PM
---

Player = Class{}

local fps = 15
local animTimer = 1/fps
local frame = 1
local numFrames = 12
local xOffset

function Player:init(skin)
    self.width = 16
    self.height = 32

    self.x = 50
    self.y = VIRTUAL_HEIGHT - gGraphics['ground']:getHeight() - self.height

    self.dy = 0
    self.dx = 0

    self.hp = 100
    self.speed = 200

    self.skin = 0
end

function Player:collides(target)
    -- first, check to see if the left edge of either is farther to the right
    -- than the right edge of the other
    if self.x > target.x + target.width or target.x > self.x + self.width then
        return false
    end

    -- then check to see if the bottom edge of either is higher than the top
    -- edge of the other
    if self.y > target.y + target.height or target.y > self.y + self.height then
        return false
    end

    -- if the above aren't true, they're overlapping
    return true
end

function Player:update(dt)
    -- keyboard input
    if love.keyboard.isDown('left') then
        self.dx = -self.speed
    elseif love.keyboard.isDown('right') then
        self.dx = self.speed
    else
        self.dx = 0
    end

    -- math.max here ensures that we're the greater of 0 or the player's
    -- current calculated Y position when pressing up so that we don't
    -- go into the negatives; the movement calculation is simply our
    -- previously-defined paddle speed scaled by dt
    if self.dx < 0 then
        self.x = math.max(0, self.x + self.dx * dt)
        -- similar to before, this time we use math.min to ensure we don't
        -- go any farther than the bottom of the screen minus the paddle's
        -- height (or else it will go partially below, since position is
        -- based on its top left corner)
    else
        self.x = math.min(VIRTUAL_WIDTH - self.width, self.x + self.dx * dt)
    end
end

function Player:render()
    love.graphics.setColor(50, 113, 168)
    love.graphics.rectangle("fill", self.x, self.y, self.width, self.height)
end
